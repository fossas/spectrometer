# Build, test, and (sometimes) create a release
#
# Linux builds are done under our haskell-static-alpine image (see: fossas/haskell-static-alpine)
# macOS/windows builds use github's setup-haskell action
#
# Binaries on each platform are stripped. This removes debug symbols.
name: Build
on: push

jobs:

  build-all:
    name: ${{ matrix.os-name }}-build
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    defaults:
      run:
        shell: bash

    strategy:
      # TODO: remove me
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        include:

          - os: ubuntu-latest
            os-name: Linux
            container: quay.io/fossa/haskell-static-alpine
            project-file: cabal.project.ci.linux

          - os: macos-latest
            os-name: macOS
            project-file: cabal.project.ci.macos

          - os: windows-latest
            os-name: Windows
            project-file: cabal.project.ci.windows

    steps:
    - uses: actions/checkout@v2

    - name: Install alpine dependencies
      if: ${{ contains(matrix.os, 'ubuntu') }}
      shell: sh
      run: |
        apk add bash xz-dev bzip2-dev bzip2-static upx

    - uses: dsaltares/fetch-gh-release-asset@0.0.5
      name: Fetch Basis vendor asset 'nomossa'
      if: ${{ contains(matrix.os, 'ubuntu') }}
      with:
        repo: "fossas/basis"
        version: "tags/latest"
        file: "nomossa"
        token: ${{ secrets.BASIS_ACCESS_TOKEN }}

    - uses: dsaltares/fetch-gh-release-asset@0.0.5
      name: Fetch Basis vendor asset 'ramjet-cli-ipr'
      if: ${{ contains(matrix.os, 'ubuntu') }}
      with:
        repo: "fossas/basis"
        version: "tags/latest"
        file: "ramjet-cli-ipr-linux"
        token: ${{ secrets.BASIS_ACCESS_TOKEN }}

    - uses: dsaltares/fetch-gh-release-asset@0.0.5
      name: Fetch Basis vendor asset 'sherlock-cli'
      if: ${{ contains(matrix.os, 'ubuntu') }}
      with:
        repo: "fossas/basis"
        version: "tags/latest"
        file: "sherlock-cli-linux"
        token: ${{ secrets.BASIS_ACCESS_TOKEN }}

    - uses: actions/setup-haskell@v1.1
      id: setup-haskell
      name: Setup ghc/cabal (non-alpine)
      if: ${{ !contains(matrix.os, 'ubuntu') }}
      with:
        ghc-version: '8.8.2'

    - uses: actions/cache@v1
      name: Cache cabal store
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store || '~/.cabal/store' }}
        key: ${{ runner.os }}-v5-cabal-store

    - name: Zero out vendored vpscli binaries for first run build performance
      run: |
        mv vendor .macos-vendor
        mkdir vendor
        touch vendor/nomossa
        touch vendor/ramjet-cli-ipr
        touch vendor/sherlock-cli
        touch vendor/pathfinder

    - name: Build
      run: |
        cabal update
        cabal build --project-file=${{ matrix.project-file }} all

    - name: Run tests
      run: |
        cabal test --project-file=${{ matrix.project-file }} all

    - name: Find and move binaries (windows)
      if: ${{ contains(matrix.os, 'windows') }}
      run: |
        mkdir release
        find . -type f -path '*/fossa/fossa.exe' -exec mv {} release \;
        find . -type f -path '*/pathfinder/pathfinder.exe' -exec mv {} release \;

    - name: Find and move binaries (non-windows)
      if: ${{ !contains(matrix.os, 'windows') }}
      run: |
        mkdir release
        find . -type f -path '*/fossa/fossa' -exec mv {} release \;
        find . -type f -path '*/pathfinder/pathfinder' -exec mv {} release \;

    - name: Update Linux vendored binaries
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        rm vendor/*
        cp release/pathfinder vendor/pathfinder
        mv sherlock-cli-linux vendor/sherlock-cli
        mv ramjet-cli-ipr-linux vendor/ramjet-cli-ipr
        mv nomossa vendor/nomossa
        chmod a+x vendor/nomossa
        chmod a+x vendor/ramjet-cli-ipr
        chmod a+x vendor/sherlock-cli
        chmod a+x vendor/pathfinder
        upx vendor/nomossa
        upx vendor/ramjet-cli-ipr
        upx vendor/sherlock-cli
        upx vendor/pathfinder
    
    - name: Update MacOS vendored binaries
      if: ${{ contains(matrix.os, 'macos') }}
      run: |
        rm -rf vendor
        mv .macos-vendor vendor
        cp release/pathfinder vendor/pathfinder

    - name: Rebuild with new vendored binaries
      if: ${{ !contains(matrix.os, 'windows') }}
      run: |
        cabal clean
        cabal build --project-file=${{ matrix.project-file }} all

    - name: Find and move vpscli
      if: ${{ !contains(matrix.os, 'windows') }}
      run: |
        find . -type f -path '*/vpscli/vpscli' -exec mv {} release \;

    - name: Strip binaries
      run: |
        strip release/*

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-binaries
        path: release

  create-release:
    name: create-release
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    needs: ['build-all']

    steps:
    - uses: actions/download-artifact@v2

    - name: Get version
      id: get-version
      # note that this strips the 'v' prefix from the tag
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

    # This uses names compatible with our install script
    - name: Bundle binaries
      run: |
        mkdir release

        ls -R

        chmod +x Linux-binaries/*
        zip -j release/fossa_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip Linux-binaries/fossa
        zip -j release/pathfinder_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip Linux-binaries/pathfinder
        zip -j release/vpscli_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip Linux-binaries/vpscli

        chmod +x macOS-binaries/*
        zip -j release/fossa_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip macOS-binaries/fossa
        zip -j release/pathfinder_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip macOS-binaries/pathfinder
        zip -j release/vpscli_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip macOS-binaries/vpscli

        chmod +x Windows-binaries/*
        zip -j release/fossa_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip Windows-binaries/fossa.exe
        zip -j release/pathfinder_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip Windows-binaries/pathfinder.exe

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
