// A gradle init script to add a `jsonDeps` task.
// This task outputs project dependency trees as JSON.
//
// The resulting JSON output is a map of configuration names to an array of
// top-level dependencies.
//
// Dependencies have a "type", either "project" or "package"
//
// "project" dependencies look like: `{ "type": "project", "name": ":project-name" }`
// "package" dependencies look like: `{ "type": "package", "name": "group:module", "version": "1.0", "dependencies": [] }`
//
// Semantically:
//
// type ConfigurationName = Text
// type Name = Text
// type Version = Text
//
// type Output = Map ConfigurationName [Dependency]
//
// data Dependency =
//     Project Name -- first-party (sub)projects
//   | Package Name Version [Dependency]

def fileLogger = [
    onOutput: {
        File logfile = new File('gradle.log')
        logfile << it
    }
] as org.gradle.api.logging.StandardOutputListener

// for configure phase
logging.addStandardOutputListener(fileLogger)
logging.addStandardErrorListener(fileLogger)

// for execution phase
gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.allTasks.each { Task t ->
        t.doFirst {
            logging.addStandardOutputListener(fileLogger)
            logging.addStandardErrorListener(fileLogger)
        }
    }
}

allprojects {
    task jsonDeps {
        doLast {
            def depToJSON
            depToJSON = { resolvedDep ->
                def artifact = resolvedDep.moduleArtifacts.iterator().next() // moduleArtifacts never returns null; can it return empty set? it seems to only return a single module or project
                def id = artifact.id.componentIdentifier
                def json = "{"
                if (id instanceof ProjectComponentIdentifier) {
                    // Minor problem here: we don't get the specific configuration used for the subproject.
                    // The default is the configuration named "default"
                    json += "\"type\":\"project\",\"name\":\"${id.projectPath}\"" 
                } else if (id instanceof ModuleComponentIdentifier) {
                    json += "\"type\":\"package\",\"name\":\"${id.group}:${id.module}\",\"version\":\"${id.version}\","
                    def childResults = []
                    if (!resolvedDep.children.isEmpty()) {
                        resolvedDep.children.each { childResolvedDep ->
                            def result = depToJSON childResolvedDep
                            childResults << result
                        }
                    }
                    json += "\"dependencies\":["
                    json += childResults.join(",")
                    json += "]"
                } else {
                    return null; // FUTURE: binary dependencies in the filetree
                }

                json += "}"

                return json
            }

            def configToKeyValue = { config ->
                def jsonDeps = []
                config.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                    def result = depToJSON dep
                    if (result != null) {
                        jsonDeps << result
                    }
                }
                def combined = jsonDeps.join(",")
                return "\"${config.name}\":[${combined}]"
            }

            def projectToJSON = { project ->
                def jsonConfigs = []
                project.configurations.each { config ->
                    try {
                        def result = configToKeyValue config
                        jsonConfigs << result
                    } catch (Exception ignored) {}
                }
                def combined = jsonConfigs.join(",")
                return "{${combined}}"
            }

            def result = projectToJSON project
            println "JSONDEPS_${project.path}_${result}"
        }
    }
}
